-- Define date ranges
WITH date_ranges AS (
  SELECT
    DATE '2020-01-01' AS previous_start,
    DATE_SUB(PARSE_DATE('%Y%m%d', @DS_START_DATE), INTERVAL 1 DAY) AS previous_end,
    PARSE_DATE('%Y%m%d', @DS_START_DATE) AS current_start,
    PARSE_DATE('%Y%m%d', @DS_END_DATE) AS current_end
),

-- Get customers in the previous period
previous_customers AS (
  SELECT DISTINCT cust_email
  FROM molten-gantry-460814-v0.BIAnalyst.master_table
  WHERE order_date BETWEEN (SELECT previous_start FROM date_ranges)
                       AND (SELECT previous_end FROM date_ranges)
  AND category_name IN UNNEST(@category_name)
),

-- Get customers in the current period
current_customers AS (
  SELECT DISTINCT cust_email
  FROM molten-gantry-460814-v0.BIAnalyst.master_table
  WHERE order_date BETWEEN (SELECT current_start FROM date_ranges)
                       AND (SELECT current_end FROM date_ranges)
  AND category_name IN UNNEST(@category_name)
),

-- Find new customers (only in current)
new_customers AS (
  SELECT cust_email
  FROM current_customers
  WHERE cust_email NOT IN (SELECT cust_email FROM previous_customers)
),

-- Find the customers who are in both period 
customers_inboth AS (
  SELECT cust_email
  FROM current_customers
  WHERE cust_email IN (SELECT cust_email FROM previous_customers)
),
  
-- Find the customer who are in current period but order more one 
customers_ordermoreone AS (
  SELECT cust_email
  FROM molten-gantry-460814-v0.BIAnalyst.master_table
  WHERE order_date BETWEEN (SELECT current_start FROM date_ranges)
                       AND (SELECT current_end FROM date_ranges)
  AND category_name IN UNNEST(@category_name)
  GROUP BY cust_email
  HAVING COUNT(*) > 1
),

-- Find repated customers
repeated_customers AS (
  SELECT COUNT(*) AS total_repeated_customers
  FROM customers_inboth
  UNION ALL
  SELECT COUNT(*) AS total_repeated_customers
  FROM customers_ordermoreone
),

-- Find churned customers (only in previous)
churned_customers AS (
  SELECT cust_email
  FROM previous_customers
  WHERE cust_email NOT IN (SELECT cust_email FROM current_customers)
)

-- Final summary
SELECT
	(SELECT COUNT(*) FROM current_customers) AS current_customers,
	(SELECT COUNT(*) FROM previous_customers) AS previous_customers,
	(SELECT COUNT(*) FROM new_customers) AS new_customers,
	(SELECT SUM(total_repeated_customers) FROM repeated_customers) AS repeated_customers,
	(SELECT COUNT(*) FROM churned_customers) AS churned_customers,
	IFNULL((ROUND(SAFE_DIVIDE((SELECT COUNT(*) FROM churned_customers), (SELECT COUNT(*) FROM previous_customers)) * 100, 2)),0) AS churn_rate;